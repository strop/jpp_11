module Printlula where

-- pretty-printer generated by the BNF converter

import Abslula
import Char

-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: [a] -> Doc
  prtList = concatD . map (prt 0)

instance Print a => Print [a] where
  prt _ = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString i)



instance Print Program where
  prt i e = case e of
   Prog stmts -> prPrec i 0 (concatD [prt 0 stmts])


instance Print Stmt where
  prt i e = case e of
   SAssign id expr -> prPrec i 0 (concatD [prt 0 id , doc (showString "=") , prt 0 expr])
   SWhile expr stmt -> prPrec i 0 (concatD [doc (showString "while") , doc (showString "(") , prt 0 expr , doc (showString ")") , prt 0 stmt])
   SIf expr stmt -> prPrec i 0 (concatD [doc (showString "if") , doc (showString "(") , prt 0 expr , doc (showString ")") , prt 0 stmt])
   SIfElse expr stmt0 stmt -> prPrec i 0 (concatD [doc (showString "if") , doc (showString "(") , prt 0 expr , doc (showString ")") , prt 0 stmt0 , doc (showString "else") , prt 0 stmt])

  prtList es = case es of
   [x] -> (concatD [prt 0 x , doc (showString ";")])
   x:xs -> (concatD [prt 0 x , doc (showString ";") , prt 0 xs])

instance Print Decl where
  prt i e = case e of
   DFun id -> prPrec i 0 (concatD [doc (showString "fun") , prt 0 id , doc (showString "(") , doc (showString ")")])
   DFunP id0 id -> prPrec i 0 (concatD [doc (showString "fun") , prt 0 id0 , doc (showString "(") , prt 0 id , doc (showString ")")])
   DProc id -> prPrec i 0 (concatD [doc (showString "proc") , prt 0 id , doc (showString "(") , doc (showString ")")])
   DProcP id0 id -> prPrec i 0 (concatD [doc (showString "proc") , prt 0 id0 , doc (showString "(") , prt 0 id , doc (showString ")")])


instance Print Expr where
  prt i e = case e of
   EBool boo -> prPrec i 9 (concatD [prt 0 boo])
   ENum numbi -> prPrec i 9 (concatD [prt 0 numbi])
   EReal numbr -> prPrec i 9 (concatD [prt 0 numbr])
   EVar id -> prPrec i 8 (concatD [prt 0 id])
   EArr id -> prPrec i 8 (concatD [prt 0 id , doc (showString "[") , doc (showString "]")])
   EFunc id -> prPrec i 8 (concatD [prt 0 id , doc (showString "(") , doc (showString ")")])
   EFuncP id expr -> prPrec i 8 (concatD [prt 0 id , doc (showString "(") , prt 0 expr , doc (showString ")")])
   ENeg expr -> prPrec i 7 (concatD [doc (showString "!") , prt 6 expr])
   EMod expr0 expr -> prPrec i 6 (concatD [prt 6 expr0 , doc (showString "%") , prt 7 expr])
   EDiv expr0 expr -> prPrec i 6 (concatD [prt 6 expr0 , doc (showString "/") , prt 7 expr])
   ETimes expr0 expr -> prPrec i 6 (concatD [prt 6 expr0 , doc (showString "*") , prt 7 expr])
   EMinus expr0 expr -> prPrec i 5 (concatD [prt 5 expr0 , doc (showString "-") , prt 6 expr])
   EPlus expr0 expr -> prPrec i 5 (concatD [prt 5 expr0 , doc (showString "+") , prt 6 expr])
   EGeq expr0 expr -> prPrec i 4 (concatD [prt 4 expr0 , doc (showString ">=") , prt 5 expr])
   ELeq expr0 expr -> prPrec i 4 (concatD [prt 4 expr0 , doc (showString "<=") , prt 5 expr])
   ELess expr0 expr -> prPrec i 4 (concatD [prt 4 expr0 , doc (showString "<") , prt 5 expr])
   EGrea expr0 expr -> prPrec i 4 (concatD [prt 4 expr0 , doc (showString ">") , prt 5 expr])
   ENeq expr0 expr -> prPrec i 3 (concatD [prt 3 expr0 , doc (showString "!=") , prt 5 expr])
   EEq expr0 expr -> prPrec i 3 (concatD [prt 3 expr0 , doc (showString "==") , prt 5 expr])
   EOr expr0 expr -> prPrec i 2 (concatD [prt 2 expr0 , doc (showString "&&") , prt 3 expr])
   EAnd expr0 expr -> prPrec i 0 (concatD [prt 0 expr0 , doc (showString "||") , prt 2 expr])


instance Print Boo where
  prt i e = case e of
   BTrue  -> prPrec i 0 (concatD [doc (showString "true")])
   BFalse  -> prPrec i 0 (concatD [doc (showString "false")])


instance Print NumbI where
  prt i e = case e of
   NumI n -> prPrec i 0 (concatD [prt 0 n])


instance Print NumbR where
  prt i e = case e of
   NumR d -> prPrec i 0 (concatD [prt 0 d])



